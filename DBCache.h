#pragma once

#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <memory>
#include <mysqlx/xdevapi.h> // Ê¹ï¿½ï¿½MySQL Connector/C++

namespace HY {

// RCSï¿½ï¿½ï¿½Ý¼ï¿½Â¼ï¿½á¹¹
struct RCSRecord {
	std::string aircraft_name;
	double frequency;      // GHz
	std::string polarization; // "HH" or "VV"
	int azimuth;        // ï¿½Ç¶ï¿½
	int elevation;      // ï¿½Ç¶ï¿½
	double rcs_value;   // dBsm

						// ï¿½ï¿½ï¿½ìº¯ï¿½ï¿½
	RCSRecord(std::string name, double freq, std::string pol,
		int az, int el, double rcs)
		: aircraft_name(std::move(name)), frequency(freq),
		polarization(std::move(pol)), azimuth(az),
		elevation(el), rcs_value(rcs) {}
};

// ï¿½ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý½á¹¹....

// ESMï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý½á¹?...

// ECMï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý½á¹?...



// ï¿½ï¿½ï¿½Ý»ï¿½ï¿½ï¿½ï¿½ï¿½ RCS
class RCSCache {
private:
	std::vector<RCSRecord> records; // ï¿½ï¿½ï¿½Ð¼ï¿½Â¼ï¿½æ´¢
									// ï¿½ï¿½ï¿½ï¿½ï¿½á¹¹
	std::unordered_map<std::string, std::vector<const RCSRecord*>> name_index;
	//std::unordered_map<int, std::vector<const RCSRecord*>> freq_index;

public:
	// ï¿½ï¿½ï¿½ï¿½ï¿½Ý¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	bool loadFromDB(const std::string& host, const std::string& user, const std::string& password, const std::string& database);

	// ï¿½ï¿½Ñ¯ï¿½Ó¿ï¿½
	const std::vector<const RCSRecord*>& findByAircraft(const std::string& name);
	//const std::vector<const RCSRecord*>& findByFrequency(int freq);



};

// ï¿½ï¿½ï¿½Ý»ï¿½ï¿½ï¿½ï¿½ï¿½ IR


// ï¿½ï¿½ï¿½Ý»ï¿½ï¿½ï¿½ï¿½ï¿½ ESM


// ï¿½ï¿½ï¿½Ý»ï¿½ï¿½ï¿½ï¿½ï¿½ ECM





}